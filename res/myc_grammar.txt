-> program'
    program
-> program
    value_declare_define
    program value_declare_define
    function_declare
    program function_declare
    function_define
    program function_define
-> value_declare_define
    value_type value_declare_define_list ;
-> value_declare_define_list
    ID $action action_value_declare
    value_declare_define_list , ID
    ID array_times
    value_declare_define_list , ID array_times
    ID = expression $action action_value_define
    value_declare_define_list , ID = expression
-> array_times
    [ VALUE ]
    array_times [ VALUE ]
-> function_declare
    value_type ID ( ) ;
    value_type ID ( arg_list ) ;
    func_qualifiers value_type ID ( arg_list ) ;
    func_qualifiers value_type ID ( ) ;
    void ID ( ) ;
    void ID ( arg_list ) ;
    func_qualifiers void ID ( arg_list ) ;
    func_qualifiers void ID ( ) ;
-> function_define
    value_type ID ( ) { content }
    value_type ID ( arg_list ) { content }
    void ID ( ) { content }
    void ID ( arg_list ) { content }
    func_qualifiers value_type ID ( arg_list ) { content  }
    func_qualifiers value_type ID ( ) { content  }
    func_qualifiers void ID ( arg_list ) { content  }
    func_qualifiers void ID ( ) { content  }
-> func_qualifiers
    static
-> arg_list
    value_type ID
    arg_list , value_type ID
-> content
    content_alone
    content_many
-> content_alone
    ;
    return ;
    return VALUE ;
    break ;
    continue ;
    value_declare_define
    expression ;
    expression_assignment ;
    expression_unary ;
    if_statement
    for_statement
    while_statement
    do_while_statement
    switch_statement
-> content_many
    content ;
    content return ;
    content return VALUE ;
    content break ;
    content continue ;
    content value_declare_define
    content expression ;
    content expression_assignment ;
    content expression_unary ;
    content if_statement
    content for_statement
    content while_statement
    content do_while_statement
    content switch_statement
-> if_statement
    IF
    IF ELSEIFS
    IF ELSE
    IF ELSEIFS ELSE
-> IF
    if ( bool_expression ) statement
-> ELSEIFS
    else if ( bool_expression ) statement
    ELSEIFS  else if ( bool_expression ) statement
-> ELSE
    else statement
-> for_statement
    for ( expression_assignment ; bool_expression ; expression_assignment ) statement
    for ( expression_assignment ; bool_expression ; expression_unary ) statement
-> while_statement
    while ( bool_expression ) statement
-> do_while_statement
    do statement while ( bool_expression ) ;
-> switch_statement
    switch ( expression ) { CASE }
    switch ( expression ) { CASE default : content }
-> CASE
    case expression :
    case expression : content
    CASE case expression :
    CASE case expression : content
-> value_type
    int  $action action_VT
    float  $action action_VT
    double  $action action_VT
    char  $action action_VT
-> VALUE
    value $action action_VE
-> ID
    identity $action action_ID
-> expression
    expression + _T $action action_CALC
    expression - _T $action action_CALC
    _T $action action_SWAP
-> _T
    _T * _F $action action_CALC
    _T / _F $action action_CALC
    _T % _F $action action_CALC
    _F $action action_SWAP
-> _F
    VALUE $action action_SWAP
    ID $action action_SWAP
    ( expression ) $action action_SWAP
-> bool_expression
    expression
    expression_unary
    expression > expression
    expression < expression
    expression == expression
    expression != expression
    expression && expression
    expression || expression
-> expression_assignment
    ID = expression
-> expression_unary
    ++ ID
    -- ID
    ID ++
    ID --
-> statement
    content_alone
   { content }