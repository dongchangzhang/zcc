-> program'
    program
-> program
    value_declare_define
    program value_declare_define
    function_declare
    program function_declare
    function_define
    program function_define
-> value_declare_define
    value_type value_declare_define_list ;
-> value_declare_define_list
    identity [ value ]
    identity
    identity , value_declare_define_list
    identity = expression
    identity = expression , value_declare_define_list
-> function_declare
    value_type identity ( ) ;
    value_type identity ( arg_list ) ;
    func_qualifiers value_type identity ( arg_list ) ;
    func_qualifiers value_type identity ( ) ;
-> function_define
    value_type identity ( ) { content }
    value_type identity ( arg_list ) { content }
    func_qualifiers value_type identity ( arg_list ) { content  }
    func_qualifiers value_type identity ( ) { content  }
-> func_qualifiers
    static
-> content
    ;
    content ;
    content return ;
    content return value ;
    value_declare_define
    content value_declare_define
    expression ;
    content expression ;
    expression_assignment ;
    content expression_assignment ;
    if_statement
    content if_statement
    for_statement
    content for_statement
    while_statement
    content while_statement
    do_while_statement
    content do_while_statement
-> if_statement
    if ( bool_expression ) statement
    if ( bool_expression ) statement else statement
    if ( bool_expression ) statement ELSEIFS
    if ( bool_expression ) statement ELSEIFS   else statement
-> ELSEIFS
    else if ( bool_expression ) statement
    ELSEIFS  else if ( bool_expression ) statement
-> for_statement
    for ( expression_assignment ; bool_expression ; expression_assignment ) statement
    for ( expression_assignment ; bool_expression ; expression_unary ) statement
    for ( value_declare_define ; bool_expression ; expression_assignment ) statement
    for ( value_declare_define ; bool_expression ; expression_unary ) statement
-> while_statement
    while ( bool_expression ) statement
-> do_while_statement
    do statement while ( bool_expression ) ;
-> value_type
    int
    float
    double
    char
-> VALUE
    value
-> expression
    expression + _T
    expression - _T
    _T
-> _T
    _T * _F
    _T / _F
    _T % _F
    _F
-> _F
    value
    identity
    ( expression )
-> bool_expression
    expression
    expression > expression
    expression < expression
    expression == expression
    expression != expression
    expression && expression
    expression || expression
-> expression_assignment
    identity = expression
-> expression_unary
    ++ identity
    -- identity
    identity ++
    identity --
-> statement
    statement_no_bracket
    statement_have_bracket
-> statement_no_bracket
    value_declare_define
    expression ;
    expression_assignment ;
-> statement_have_bracket
   { content }
-> arg_list
    value_type identity
    arg_list , value_type identity